<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[因地制宜，与时俱进]]></title>
    <url>%2F2017%2F07%2F15%2F%E5%9B%A0%E5%9C%B0%E5%88%B6%E5%AE%9C%EF%BC%8C%E4%B8%8E%E6%97%B6%E4%BF%B1%E8%BF%9B%2F</url>
    <content type="text"><![CDATA[一款新的产品（创新），推出之后必然存在一段存在一段试探市场的时间，比如IPHONE第一代，哪怕2007年那会，使用起来也不见得有那么易用，加上价格稍贵，而且很容易摔坏，销量并没有那么好，更多的是在试探市场的反应，IPHONE出来的触摸体验，这一点做得出色，给它后面的产品版本演进创造了机会，接下来不断的改进，直到IPHONE4，迎来了大卖。 而对于新产品的评估，我们总会按照已有类似产品的标准和要求去衡量，这样带来的问题是什么？新的产品有很多指标可能不会通过，最后这款新产品很可能就变得不能做了，同样以IPHONE为例，拿去做一下跌落测试，肯定不能通过，最后因为这个指标，产品可能发布不了了，更为可能的是，产品经理很可能因为对于标准和要求的限制，导致根本不会出现新的产品，带来更革命性的创新。 对于创新类的产品，如果遇到了和现有标准和要求不符的部分，不妨评估看是否触发了最低的底线，比如涉及人身安全的爆炸，起火，高辐射，中毒等等，底线没有触及，也许我们可以尝试含风险推出产品。 以产品耐环境中的高低温检测为例，对于汽车电子类产品，放在汽车里面的不同位置，对于温度要求也不一样；对于工业类产品和民用产品，温度要求又有所不同；不同国家因为一年的温度变化不同，对于产品的高低温要求又有所不同。 因此，新产品的研发，最开始就需要有产品营销策略，比如小批量面向的用户，是本公司人员，还是不同行业/年龄段/职业人员，同一地区人员还是全国各地选点。选择不同那么研发策略定然不同。同样第一季度或者第一年的面向用户定位，也需要明确，那么研发产品版本演进策略必然不同。产品就孩子一样，他也因为时间的推进，根据市场环境，市场反馈，优化改进而不断更新和演进版本。 对于纯软件产品，迭代速度很快，随时可更新，那么产品的演进速度可以很快，创新也会容易很多。 对于软硬件类的，开个模就要花费大量资金，加上验证测试，检测，生产线的磨合，耗时很长，产品演进的速度并没有那么快，这方面是否有更快的迭代方法？ 对于芯片类的，迭代的成本更高，代价很大，更快的迭代？ 总体来看，涉及硬件的产品需要跨年甚至跨几年的时间来演进，相对软件来看，速度很慢，也会让不能很快适应市场变化并调整的企业迅速倒闭，这也让好的硬件产品更加稀缺，附加值更高。 无论如何，我们的软硬件产品应该因地制宜，与时俱进，产品研发要看天，也要顺时而变。]]></content>
      <tags>
        <tag>产品</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三千块和三万块]]></title>
    <url>%2F2017%2F06%2F11%2F%E4%B8%89%E5%8D%83%E5%9D%97%E5%92%8C%E4%B8%89%E4%B8%87%E5%9D%97%2F</url>
    <content type="text"><![CDATA[三千块和三万块两个选择 今天给你三千块钱 过一年之后给你三万块钱或者零元（因为不同因素，可能会变为零） 你会选择哪一个？ 我的第一选择是三千块钱，为什么呢？尽管将来可能收益是今天的十倍，但未来一年的不可知因素太多了，很可能就什么都没有了。所以坚定的选择三千块。 但是如果把选择再改一下。 今天给你三千块钱 过一年之后给你三万块钱可能性为80%，零元可能性为20% 你会如何选择呢？ 我的选择是一年后的80%三万块，理由是三千块钱就是我的投资，等它一年，如果真变为0，那么算是投资失败。 你的选择？ 或者你有什么想法？]]></content>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[卡农，一辈子听不厌]]></title>
    <url>%2F2017%2F06%2F04%2F%E5%8D%A1%E5%86%9C%EF%BC%8C%E4%B8%80%E8%BE%88%E5%AD%90%E5%90%AC%E4%B8%8D%E5%8E%8C%2F</url>
    <content type="text"><![CDATA[不知道什么时候开始，知道卡农这首曲子的，也许是《我的野蛮女友》，也许是一些广告，也许是一些宣传片…… 总之，它随处都可听见。 也许你和我一样，听了无数次，但还不知道它的曲名，他就是 卡农 当今的百科全书Wikipedia（多么幸福，百科全书免费获取，不需要去图书馆，不需要购买书籍）上是这么介绍的 卡农（Canon）是一种音乐谱曲技法，和赋格一样是复调音乐的写作技法之一，也是利用对位法的模仿技法。卡农同时也指以此种技法创作出来的音乐作品，比如巴赫的《五首卡农变奏曲》。运用卡农技法的著名作品有 贝多芬的命运交响曲 莫扎特《安魂曲》第二章《垂怜经》合唱部分运用了卡农手法 。。。。。。 而最著名的卡农作品的代表作，帕赫贝尔（Johann Pachelbel）的《D大调卡农》（Canon in D Major），此曲还作为代表人类文明的成就之一，被美国国家航空航天局通过人造卫星送入太空。 以至于人们一谈到卡农，就是指帕赫贝尔的D大调卡农，因为实在是太经典了。在这个页面),你可以听到，震撼啊，是不是似曾听过。 一般演奏卡农，是这样的 开始以大提琴启奏2小节低音部分（黑色部分）， 低音部分2小节为单位的和声不断循环，重复28次。 然后三把小提琴间隔八拍先后加入。小提琴全部拉奏完全相同旋律，前后仅三段不同的旋律，每段仅两小节的旋律供重复拉奏。音乐虽然不断回旋往复，但其旋律之美不让人觉得单调，反而感觉动听悦耳。 嗯，网易云音乐上面还有人已经收集了各个版本的卡农，640首。 另外近期发现一个学习制作音乐的好网站(牛X又简洁易懂)，也许对你有用。 https://learningmusic.ableton.com/ 最后，这里有个历史悠久的社群网站 http://canon8.com/]]></content>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[推荐一个好用的图床和找图片的网站]]></title>
    <url>%2F2017%2F06%2F02%2F%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BA%8A%E5%92%8C%E6%89%BE%E5%9B%BE%E7%89%87%E7%9A%84%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[传说七牛的图床比较好用，所以开始探索，用下来的感想是 哎呀，不是一般的难用啊 没有好用的客户端，直接上传图片，因此产生了大量的网站和工具来支持。 图片的网址做域名转换居然需要备案。 最恶心的是，你的余额如果不足10块，不能进行域名转换，七牛你是不是穷疯了。 无奈之下，我只有放弃了。 下面推荐一个极其好用的图床 https://imgbb.com 不用注册，拖动图片，直接上传，而且速度不错，上传完成，直接给出网址，给出复制按钮。，无比方便。 另外，写文章找无版权图片，比较困难，这里推荐一个我常用的，总是能让你找到合适的。 https://pixabay.com/]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[推荐一个超好用的Podcast软件，值得你拥有]]></title>
    <url>%2F2017%2F06%2F02%2F%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E8%B6%85%E5%A5%BD%E7%94%A8%E7%9A%84Podcast%E8%BD%AF%E4%BB%B6%EF%BC%8C%E5%80%BC%E5%BE%97%E4%BD%A0%E6%8B%A5%E6%9C%89%2F</url>
    <content type="text"><![CDATA[苹果自带的Podcast并不是很好用。我的最爱是Overcast。 为什么呢 因为它有着下面的杀手锏特性 速度，即Smart Speed（智能加速），你可以智能调整速度，而不是普通的调整为2倍速或者1.5倍速，既能够听清楚主播的内容，又能有效节省时间。 音量，即Voice Boost（音量均衡），他可以智能调整音量，对于对话类的podcast，主播的声音响亮程度不同，它可以均衡这些音量，从而既不会觉得太轻听不见，也不会因为太高被吓到。 播放，即Smarter Playlists(智能播放)，播放可以制定过滤和排序等规则，智能插入。 定时关闭，睡觉的时候可以放心了。 流畅，快，这是最重要的。 它是免费的]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[罗永浩：没有现在的我辅导5年前的我，所以创业五年来那么艰辛。这部剧可以实现梦想]]></title>
    <url>%2F2017%2F06%2F02%2F%E7%BD%97%E6%B0%B8%E6%B5%A9%EF%BC%9A%E6%B2%A1%E6%9C%89%E7%8E%B0%E5%9C%A8%E7%9A%84%E6%88%91%E8%BE%85%E5%AF%BC5%E5%B9%B4%E5%89%8D%E7%9A%84%E6%88%91%EF%BC%8C%E6%89%80%E4%BB%A5%E5%88%9B%E4%B8%9A%E4%BA%94%E5%B9%B4%E6%9D%A5%E9%82%A3%E4%B9%88%E8%89%B0%E8%BE%9B%E3%80%82%E8%BF%99%E9%83%A8%E5%89%A7%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%A2%A6%E6%83%B3%2F</url>
    <content type="text"><![CDATA[这部电视剧就是 EU超时任务 它熟练的运用了编程思想，整部剧的剧本围绕一段三天的时间，让主角一人在某个时间点走到固定地点，带着这三天的记忆穿越回到三天前，重新经历这三天，只要主角愿意，可以一直重复经历这三天，而剧情就是主角一直想改变一些这三天发生的事情，但总是不能如愿。 编剧把三天时间和空间作为一个函数栈一样，在函数中设立递归条件，传递主角这个变量进到下一个递归的场景中，所有其他变量都不变，只有主角这个变量变了，因为它带着记忆。 更为奇葩的是，编剧很会玩，到了最后几集，居然不仅仅主角在玩这个三天轮回，另外一个主角和一个配角也发现了这个地点，所以也开始玩轮回，让函数的变量多了至少两个，剧情更加扑所迷离，极其烧脑。 这就像函数中的变量，最开始只有一个变量可以递归进入下一个递归函数，接着因为除了某个条件比如if判断，然后其他两个变量也跟着可以进入下一个递归函数，那么仿佛在有限的时间和空间内，创造了N个世界，因为在三天时间里面可以发生很多事情，然后加上三个变量并行捣鼓出各种事情（玩法）。 这个剧本不知道是不是懂点编程的编剧编的，感觉好玩极了，看豆瓣的介绍信息如下，共有6个编剧，花了不少心思吧：） 最后，这个家伙演的真拼命啊]]></content>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[做这个时代的”生产者“，而不仅仅是”消费者“]]></title>
    <url>%2F2017%2F06%2F02%2F%E5%81%9A%E8%BF%99%E4%B8%AA%E6%97%B6%E4%BB%A3%E7%9A%84%E2%80%9D%E7%94%9F%E4%BA%A7%E8%80%85%E2%80%9C%EF%BC%8C%E8%80%8C%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AF%E2%80%9D%E6%B6%88%E8%B4%B9%E8%80%85%E2%80%9C%2F</url>
    <content type="text"><![CDATA[什么是消费者小的时候，长辈们经常教导我，长大了去做官。在他们的眼里，当官意味着荣华富贵，意味着不用天天下地干活，不用起早天黑，可以坐在有空调的房间里面，抽着烟，然后看看报纸，指挥一下人们干活，或者偶尔的到村/里面来视察（旅游）一下，异常的轻松（当然实际情况并非如此），工作非常的稳定，有固定的工资，铁饭碗，顺便可能还可以一人得道，鸡犬升天。在这样的长辈教导下，小时候只有好好读书，认真上学，考上公务员，争取将来挣个铁饭碗。 但现实往往不是如此，看看《人民的名义》就知道，当官的（比如李达康书记）依然有各种指标压力，依然需要为钱奔忙（拉投资），要解决人们的困难和问题，城市规划等等一系列杂事，还得和各行各业的人们打交道，总之并不是长辈们想象的那样。 也许现在看来，普通人才是这样的角色， 随着生活水平的提高，我们通过手机就可以看新闻，基本上家家都能装上了空调，吃喝也不是以前的吃不好了，酒肉每餐都行，慢慢有了点享受古代皇帝待遇的感觉。 有人说 看今日头条，就像古代的皇帝批阅奏章，看到好的文章就点个赞，不好的点个不感兴趣，就像奏折一样，每天纵览天下大事，然后批示喜爱：） 如今有几乎家家都有电视，而且是大屏，动辄48寸，人们养成了早已经养成了看电视的习惯，有了手机，更养成了手机看视频的习惯。 在我认为，享受古代皇帝待遇的模式就是消费者模式，这种模式喜欢被动接受，希望别人安排自己的任务，别人直接告诉他怎么做怎么做，喜欢人云亦云，喜欢饭喂到嘴边，希望美女送到身边成为自己的女友，喜欢钱多事少离家近的工作。。。。。。 消费者模式对我们的影响巨大以看电视为例子，这就是完全的消费者模式。很多人一下班回到家就打开电视，还有甚至买了折叠桌，专门边看电视边吃饭，还有如下图的看视频神器，而看电视的过程中丝毫不费脑子，大量的综艺节目，电视剧，电影，把几年的事情压缩成几分钟，把需要长期积累的事情瞬间搞定，给人造成了强烈的幻觉，让我们的脑子短路，逐步了放弃对自己行为和思想的控制，让电视操控了我们的生活。也许你可以试着跟踪一下自己花费在电视或者手机视频上的时间，你就会发现花费的时间超出你的想象。 同样，学习编程，不能仅仅看书，看视频，只关注看这个动作，如果只是看，而不是动手开始实践，那么看了可能还不如不看，因为看了会给人一种懂了的感觉，进而兴趣点下降，久而久之误认为自己懂了，但实际上真的开始编程就会发现，基本上什么都没搞懂，遇到一个点就会卡住，最后真的变成了从入门到放弃。 再举个例子，一名软件测试员在一个工作工作8年，但是一直在做着鼠标点点点看结果的状态，然后用着别人提供的文档模板写着测试报告，在长期的测试工作中（破坏性思维），保持了使用软件并且不断给软件挑错的习惯，也是比较浅层的消费者模式，在该模式下，很少去思考如何让点点点的工作能够自动运行，是否构建一些工具进行自动测试，测试报告是否可能做些创新，抓住最主要的信息展现，提供产品发布决策依据等等。 消费者模式 =》生产者模式消费者模式对我们的负向影响巨大，我们应该逐步从以消费者模式为主转换为以生产者模式为主。生产者模式的人一般是这么干的。 看电视剧集，将视频节目先养肥，集中一个时间，限定时间进行观看，并在看完之后有所输出，发表自己的观点。 学习编程，边看边敲代码，敲代码就会发现产品制造过程的细节，才会发现产品打磨中的改进点。 做软件测试，开发测试工具进行自动化测试，给出对产品的完整评估并得出测试报告，有效支持产品发布决策。 不是看着心动的美女，只是看看，而是付诸行动追求。 不是饭需要喂到嘴边，而是下地干活，生产粮食。 不是伸手党，而是注重实效的搜索达人，乐于助人的分享者。 但并不是说完全变为生产者模式，而是逐步将以消费者模式转为生产者模式， 累不累有人就会说了 你这样是不是很累？ 是的，这样真的会累一点，但他的好处也有很多。 《罗辑思维》有一期节目《怎么样成为一个高手》，在最后有讲到： 可是认知这个东西就不一样 ，它是幂律分布， 什么意思？就是只有极少的人能够达到认知的高层 。 为什么？ 因为认知是学习得来的你通过不断地练习，不断获得正确的反馈，然后你的认知是不断的蹿高，而把绝大部分人留在身后，而在认知上，高手和低手的差别那就是判若云泥。 听到这儿，你可能会说，那这个世界是不是变得越来越不公平，我觉得这话说的也不对，为啥？ 因为世界确实分成了两种，一部分人幸福地在生活，你越来越休闲，你越来越舒服 而一部分人呢，可能他的财富越来越大，影响力越来越大，但是他付的代价也很大 所以二者之间你自己选了 对了，你愿意成为那部分人呢？]]></content>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习Javascript，代码编辑用什么工具好？不妨试试Visual Studio Code]]></title>
    <url>%2F2017%2F05%2F31%2F%E5%AD%A6%E4%B9%A0Javascript%EF%BC%8C%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E7%94%A8%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7%E5%A5%BD%EF%BC%9F%E4%B8%8D%E5%A6%A8%E8%AF%95%E8%AF%95Visual-Studio-Code%2F</url>
    <content type="text"><![CDATA[学习Javascript，代码编辑用什么工具好？不妨试试Visual Studio Code 0 前言昨天我发了一篇《想学Javascript？ 这3个资源不可错过哦》，有心的同学可能已经开始行动了。 今天我们来聊聊开发必备的工具 代码编辑器 实际上在最开始学习Javascript时可能并不需要什么编辑器，为什么呢？ 1 Chrome因为有Google的浏览器chrome就可以了，Chrome的Chrome DevTools 可以提供代码编辑，调试等。2步搞定 打开Chrome， Ctrl + Shift + I（(Mac上为 Cmd+Opt+I）就可以打开DevTools. 然后点击菜单上面的 Sources，点开后，点击Snippets,就可以开始编写代码了。 如果需要更详尽Chrome DevTools 使用信息，推荐极客学院的文档，相当的详细，质量高。 http://wiki.jikexueyuan.com/project/chrome-devtools/ 2 VSCode尽管Chrome编写调试程序也是挺方便的， 但一旦你已经开始做一个规模稍大的项目，专门的代码编辑器更加方便，那么下面就登场Visual Studio Code，以下简称VSCode。 话说很久以前，豪哥我最开始编码使用的是Ultraedit，后来用过SourceInsight，Vim，Sublime text，Atom，这些工具一个一个都很好，但是自从用了VSCode，到目前为止，个人认为是最好用的。这里不开启编辑器之争，其实编辑器也是工具，大家如果对某个工具用的很6，继续用熟就是了，不必争论，只不过对于初学者来说，我个人建议直接上VSCode。原因： 有非常易懂的视频教程，只要花上30-40分钟，就可以基本掌握工具的使用 https://code.visualstudio.com/docs/getstarted/introvideos 视频浅显易懂，听不懂英文？没关系，其实都是代码界面的操作，静音也可以理解意思。 视频无法播放？你可能需要科学上网，话说这也是编程必备技能之一啊，如果不清楚可以留言给我哦，我可以帮你：） 详实的文档手册 除了一般的用户使用指导信息之外，它还有专门的Node.js Tutorial in VS Code章节哦， 强大并且易用的插件 插件安装贴心，一步到位，不需要敲命令安装，直接在工具主界面，点左侧最下面的按钮，选择需要的插件点安装就可以了。 其实VSCode和Atom都是基于Electron（Github出品的牛XX产品）来开发的，但是atom总体感觉有点太自由，插件并不是那么体贴，比如网上会有很多问题是这样的 Atom有哪些好用的插件？ VSCode已经很好的解决了这个问题，主动推荐给你想要的插件，并且质量足够好，解决了新手的学习工具中插件带来的使用困惑。 3 入门对于初学者来说，可以从五大方面着手，带着问题去练习。 输入 基本的拷贝，粘贴，剪切，行移动，删除，光标移动怎么做 多行选择和操作，多行的光标移动 如何列模式操作 如何快速多行注释 浏览 查找和替换怎么做 全项目工程查找和替换怎么做 如何全项目工程一键查找一个符号（函数或者变量，类等） 如何游走函数之间的调用关系 如何光标穿越前后括号，中括号， 如何折叠代码 视图 如何进行文件/文件夹，打开，关闭，保存 如何分屏，窗口的控制 如何全屏显示 如何改变文件格式 调试 如何设置断点 如何进入下一层 如何返回上一层 如何停止 如何查看调用栈信息 版本 如何比对不同版本的代码 如何进行各种git操作（git的内容比较多，建议看 Pro Git) 终端 如何调出终端 如何拷贝粘贴 哦，对了这里有一份快捷键的列表，在平时可以随时查找。 https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf 当然，如果你感兴趣了，还有很多有趣的内容，比如你可以 自定义自己的主题 自定义自己的snippets 自己开发插件 等等。 4 结语哦，对了，VSCode是微软开发的开源产品，这几年微软在开源领域很有作为，而VSCode确实是微软的诚意之作。 官网地址 https://code.visualstudio.com/ Wakaka,Play happily together！]]></content>
      <tags>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[得到罗胖的001号知识发布会]]></title>
    <url>%2F2017%2F05%2F29%2F%E5%BE%97%E5%88%B0%E7%BD%97%E8%83%96%E7%9A%84001%E5%8F%B7%E7%9F%A5%E8%AF%86%E5%8F%91%E5%B8%83%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[2个多小时的发布会，使用2倍速观看，大概1小时左右看完，李翔、薛兆丰、宁向东、卓克、严伯钧、罗永浩、徐小平都上台进行了表演，其中徐小平的表演最有意思，动作夸张，语言机智幽默，令人捧腹，感觉已经把罗胖的风头抢走了。 整体的感受如下 0 知识也作为产品发布一般对于产品，我们脑子里就会觉得是个实体的东东，但这个世界，其实并不是完全是这样，很多事物是抽象，但非常有价值，很多时候这些抽象的事物，没有价格，更别说是产品了。 比如在中国，长久以来，软件产品一般都是免费的，作为赠品赠送给客户的，所以很多做IT类产品的公司不重视软件，认为软件是最廉价的，为什么，因为客户看不到实在的东东，你卖给了客户一台机器，你告诉客户把软件升级一下（做了很多优化和性能提升等），然后说要收钱，客户肯定不干，然后就不了了之，最后软件部门的活也不用干了，慢慢的这个行业也做烂了。 但是互联网特别是移动互联网到来之后，苹果就出现了AppStore这个东东，软件不受待见的问题瞬间变得解决了，开发者的收益可观，可以更加专注，然后开发者更加专注，良性循环出现，苹果也做成了大生意。 同样，如今的知识，有生命力的知识，也应该有价值，有价格，并且能够作为产品发布。 这场发布会与其说是知识发布会，不如说是“牛人”介绍会，让每个IP在台上表演一番，然后卖自己的产品，当然还有两个是得到团队输出的产品（实际上是知识生产工厂）。 目前来看可以看成是“牛人”介绍会，未来也许可以真的做成知识产品发布会。 1 管道的生意从2013年第一期我就关注了罗辑思维，基本上每周的视频都有看过，不能说期期都精彩，但真的是期期都有料，收获颇丰。最开始罗胖并不是一个创业者，但可能有创业的心。 在优酷上面立足一个点，并且死磕自己，以伴读书童宣传，实际上是导读先生。 接着你会看到实际上视频很多资料是有攥稿人写的，然后由罗胖演绎出来。 导读先生顺理成章的开始买书了，成为了生意人，这个时候应该就是考虑开始创立公司了。 又，微信上搞成了卖出平台，每周推荐书。这个时候其实就是做管道了，因为成为了平台，只抽取少量的利益，把利益归于书籍作者。 做着做着，可能觉得跑到不够宽，自己搞了个app得到出来。 得到最开始也买书，接着就开始引入大咖，开始收费知识服务，截止目前1年，做得很不错。 跑道又加宽，提供知识产品。也许这个管道的带宽也想太平洋一样宽，而得到做这个管道要做的足够坚硬，牢固，现在看里面的内容也许领域不多，内容也并不是那么的让人想得到，但是如果未来有足够好的质量管控算法，就像生产线一样生产出知识产品，也许真的可以做的很大很大。 2 管道里面的内容尽管目前是邀请制，但我相信，未来不应该也不会一直如此，因为现在是初始期，必须保证内容足够吸引人，聚集人群并且培养起用户习惯，那么不久的将来，在用户的大基数情况下，也许能够使用机器学习来操作内容的筛选，识别，匹配来生产出高质量的知识产品，这样可以开放出来，那么这个管道必定可以更粗，并且更加有聚集效应。 关于内容，除了做出来的产品，其实像 如何生产知识的知识 做出作品的知识 做出产品的知识 如何创作的知识 等等生产知识的知识是奇缺的，每个领域都非常缺。 3 人格魅力知识型IP，通过人格魅力来打动人们，形成一个领域至高点，然后构建起社群，加上这样的社群成为一个生产型社群，那么知识就可以像打造苹果的iphone一样，打造出令人惊艳的生产型产品？ 徐小平已经50岁了，但是从现场看，人格魅力不减啊，这可能需要很久很久的高强度积累吧。 4 结语在未来，人工智能崛起，也许个人魅力才是最重要的， 如果再过20年，是否还能保持身体轻便，思维灵活，幽默风趣，心态如18呢。努力吧。]]></content>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[别迷茫了，你的主要目标是为他人带来价值]]></title>
    <url>%2F2017%2F05%2F27%2F%E5%88%AB%E8%BF%B7%E8%8C%AB%E4%BA%86%EF%BC%8C%E4%BD%A0%E7%9A%84%E4%B8%BB%E8%A6%81%E7%9B%AE%E6%A0%87%E6%98%AF%E4%B8%BA%E4%BB%96%E4%BA%BA%E5%B8%A6%E6%9D%A5%E4%BB%B7%E5%80%BC%2F</url>
    <content type="text"><![CDATA[别迷茫了，你的主要目标是为他人带来价值0 迷茫高二的时候，我写了一篇周记《人活着是为了什么》，对于年少无知的我来说，这篇周记也许是我个人意识觉醒后的第一篇作文，内容大概讲的是我当时内心的疑问，对今后的人生产生了大的奇思怪想，总会冒出轻生的念头。 人活着是为了什么 也许你也有过这样的疑问。 记得当时的老师看到我的周记之后，给了一个批注 为人民服务 也许是因为老师是共产党员，也许是我没理解这句话的意思，也许是总会在政府机关门口或者类似的地方看到这样的标语，当时的我对这句话很反感，并且觉得老师在敷衍我。 总之，这个问题一直缠绕着我，直到现在，也许会在我脑子里面问一辈子。 1 更迷茫工作以后，我成为了一名IT从业者，进入了H公司，H公司是个大公司，和我同一天入职的就有60多号人，并且很巧，我和A君，B君都被分到了同一个部门，做同样类型的工作。 3年以后，A君已经升任为隔壁部门的主管了，B君也因为工作出色被分到了海外（补助丰厚），而我待在原地，卖力的干着我刚进公司时的工作。其实当时心里面觉得不公平啊，我的工作能力没有比他们差呀，为什么他们的发展就是不一样呢。自己脑子也不笨啊，思来想去最后归咎于运气啊。也许你也有类似的经历，同样感到过迷失， 难道我们或者就是和周围的人拼比智商，才气，职位，收入，名声，威望吗？ 其实那时候我感觉更迷茫了，每天工作就像在沙漠中行走，没有动力，没有鸡血啊。对这个原始问题更加想不清楚了。 人活着是为了什么 那时候的我，独自一人在离家乡1千多公里的城市，多么希望有个人生攻略啊，就像打RPG游戏一样啊，按照攻略，马上打败BOSS，达到人生高峰，面向成功。但想着不对啊，游戏打完了呢，难道就挂了吗。 2 不再迷茫继续工作几年后，工作环境也有了一些变化，离家乡近了，也组建了家庭，并且有了自己的孩子，我变得不再那么迷茫了。 回想一下高中老师给我的答复–为人民服务–也许有些官腔，但并不是废话，很可能在他的心里面，也许认为我能够理解这句话。但多年后我才能完全理解或者有着自己的理解。 其实《射雕英雄传》就有这么一段，郭靖学会了那么高强的功夫，却苦苦思考学了武功没什么用，几乎要自废武功了，活着是为了什么（不知道黄蓉还活着的情况下），最后就是靠洪七公给点拨了一把，在当时的大环境下，提出了锄强扶弱，伸张正义，为国为民的思路，并且是靠在华山论剑中以身作则的方式教育了郭靖。 如果你已经结婚或者有了小孩，就会发现，他们都很需要你的帮助和爱护，而这一点会让你瞬间觉得活着多么有意义。其实 我们活着更多的是别人需要我。 一旦有了这个认识， 那么很多纠结就可以解开了。 收入也许很重要，但他并不是人的全部啊，而且最关键的，我们获取收入的同时，是不是给他人带来的价值。 职位和地位也许也很重要，但在这个互联网时代，可能慢慢变得不再那么重要了，更为重要的，可能是我们的影响力，而影响力将成为我们的社交货币。 拼智商，貌似在社会上生存，智商并不是最重要的。 再多的拼比，实际上并没有必要，每个人在这个世界上都是不同的。对于个人来说，能够给来带来希望的或者让人觉得活着的意义，也许就是 为他人/社会带来价值。 3 目标爱因斯坦曾经说过 Try not to become a man of success, but rather try tobecome a man of value. 不要想着去做一个成功的人，应该想着成为一个对社会有价值的人。 人们都渴望成功，但是达成成功的目标可能不是数据，不是KPI，而是我们的努力是不是对他人产生了价值。 一个医生，给他加薪1000，也许会很高兴，但如果他帮助一个病人治好了痛了很久的痔疮，对于医生来说，产生的幸福感可能比给他加薪1000来的强烈。 一个老师，让他升为教研主任，也许真的很高兴，但如果没有升，但是却看到自己的学生成群的成为了社会的栋梁，没有什么比这个带来的幸福感更加强烈了。 作为IT从业者，也许看到了新技术，掌握这个新技术让我们高兴，但没有比我们自己写的代码在每个人的手机中更使用，做出的产品在千家万户使用更加让人幸福的了。 4 总结 不管从事什么工作，如果能够给他人/社会带来价值，那么这句话就真的应验 “干一行，爱一行”。 无论在什么的家庭/社区/环境生活，如果能够日行一善，有能力的情况下，尽可能的帮助他人，也许没有比这个更令人高兴的了。 如果想清楚了这一点，那就没什么可以迷茫的了，努力做一个对社会有价值的人吧。]]></content>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学了这么久编程，还是没有学会，怎么办]]></title>
    <url>%2F2017%2F05%2F26%2F%E5%AD%A6%E4%BA%86%E8%BF%99%E4%B9%88%E4%B9%85%E7%BC%96%E7%A8%8B%EF%BC%8C%E8%BF%98%E6%98%AF%E6%B2%A1%E6%9C%89%E5%AD%A6%E4%BC%9A%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8A%9E%2F</url>
    <content type="text"><![CDATA[困境未来，会编程可能是最基本的能力，否则将会被社会边缘化。就像如今不会英文，见识和视野将会变得狭窄，进而无法突破，自身的“自由”无法获得，在一个巨大思想监狱之中，只是不察觉或者在井底。 也许因为种种原因，你开始了一门新的编程语言的学习，买了编程书，参考了网上的各种教程，参加了网课，甚至参加了线下的编程训练课程，最终变得中途放弃了，还是觉得 这太难了。 亦或者 编程语言不适合我。 离开了这些教程，还是无法写出一个自己的程序，甚至开始都不知道怎么开始。这种感觉也许你也有。 方法如何突破这个困境，如果你看过《黑客与画家》，那么在【设计和研究】章节中，保罗·格雷厄姆是这么说的 软件领域以外的人可能没听过“弱即是强”，所以意识不到这种模式在艺术领域普遍存在。以绘画为例，文艺复兴时期就有人发现了这一点。如今，几乎所有的美术老师都会告诉你准确画出一个事物的方法，不是沿着轮廓慢慢一个部分、一个部分地把它画出来，因为这样的话各个部分的错误会累积起来，最终导致整幅画失真。你真正应该采用的方法是快速地用几根线画出一个大致准确的轮廓，然后再逐步地加工草稿。 … 软件开发也可以这样做。原型（prototype）并不只是模型（model），不等于将来一定要另起炉灶，你完全能够在原型的基础上直接做出最后的成品。我认为，只要有可能，你就应该这样做。这样的方式使得你可以利用在开发过程中一路产生的新想法。不过更重要的是，这样做有助于鼓舞士气。 在软件领域，就应该有个大概的原型，而原型之前呢，就是需要一个idea，把这个idea立起来作为自己的任务，这样的任务如果耗时稍长我们叫做项目。 那么解决无法写出自己的程序的方法就是 构建你自己的项目。 因为项目对应的idea，idea下一步的原型，必定鼓舞你的士气，让你持续的干下去，直到完成。 首先是自己的项目一定是自己的项目，而不是拷贝过来的代码改一改的项目，这并不属于你的项目。一旦已经学了最开始的入门教程，就需要开始计划自己的项目。也许入门教程里面有很多所谓的项目，但那都是作者或者讲师的项目，并不是你的，所以要挖空心思开搞自己的项目。 怎么计划自己的项目很多人会有这样的疑问 做什么项目呢？我都没有什么想法，哪来的项目可做。 项目不需要大，项目太大一个人也完不成，而且很容易变成空想。如果实在没什么想法，一下几个资源也许对你有用。 500个项目等着你做，从中选一些自己感兴趣的项目来做。这里面附带有参考答案。 每日编程,隔一天就会有一个小任务，周一最简单，周五最难，非常的活跃，也许你可以试试。 freecodecamp 聚焦里面的项目，以项目驱动的模式去完成。 还有一个方法，想一想自己在生活工作中有没有，经常重复繁琐的事情在发生，看看有没有办法通过编程解决这样的事情。又或者自己感兴趣的某个领域是否有足够吸引你的想法，也许可以转化为自己的项目。 再不济，写一个自己的博客程序，写一个股票价格实时追踪程序，自己感兴趣的网站的爬虫程序等等。 一旦，有了自己的项目程序，这个价值比学习20套入门教程有效的多的多，因为每一行代码，你都可以讲清楚为什么怎么干，虽然可能写的并不好，甚至很难被人读懂。 同时，也掌握了一个项目是如何开发出来的，最终完成的产品是怎么生产出来的。 总结如果你现在已经学习了一段时间编程，并且打算放弃，千万别这么干，因为主要掌握方法你可能很快就会突破困境了，那就是建立自己的项目，并开始干。]]></content>
      <tags>
        <tag>技能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“管道”就是生命线，职场人更应打造自己的“管道”]]></title>
    <url>%2F2017%2F05%2F25%2F%E2%80%9C%E7%AE%A1%E9%81%93%E2%80%9D%E5%B0%B1%E6%98%AF%E7%94%9F%E5%91%BD%E7%BA%BF%EF%BC%8C%E8%81%8C%E5%9C%BA%E4%BA%BA%E6%9B%B4%E5%BA%94%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E2%80%9C%E7%AE%A1%E9%81%93%E2%80%9D%2F</url>
    <content type="text"><![CDATA[“管道”就是生命线，职场人更应打造自己的“管道”什么是“管道”华为有一个“端管云”战略，具体是指终端（消费电子），管道（运营商），云（企业）。任正非在多个场合提到过这个战略，最有名的一句话摘录如下 华为的傻，还体现为不为短期挣钱机会所左右，不急功近利，不为单一规模成长所动，敢于放弃非战略性机会，敢赌未来。敢赌就是战略眼光，就是聚焦于大的战略机会，看准了，就集中配置资源压强在关键成功要素上。华为多年来只做了一件事就是坚持管道战略，通过管道来整合业务和产业。通讯网络管道就是太平洋，是黄河、是长江，企业网是城市自来水管网，终端是水龙头，沿着这个整合，都是管道，对华为都有用。当然，管道不仅限于电信，管道会象太平洋一样粗，我们可以做到太平洋的流量能级，未来物联网、智能制造，大数据将对管道基础设施带来海量的需求，我们的责任就是提供联接，这是一个巨大的市场。 这里的管道是指通讯基础设置，他是信息时代的大生意，就好比我们生活中的煤气管道，自来水管道，电力传输管道，都是社会中的大生意，纵观世界上的百年大企业，大部分建立在千家万户人们日常需要的管道生意上。 在互联网时代，阿里巴巴成为国内电商的代名词，建立了人们网上购物的管道，有了管道，营收自然就来了。苹果这样的公司，除了硬件产品营收外，排在第二的就是应用商店的营收了，而且增长明显，而应用商店就是人们使用手机获得APP的管道，而我认为苹果最值钱的也就是这个应用商店了。 如今，微信将更多的人圈进了互联网，一个农村的小伙，你让他去某网站上发布一份简历找工作，也许他还不会;以为50岁的老农，你让他下载淘宝应用购物，他也许不会；但是，如果你让他们打开微信和你联系，发个红包，他们真的会。现在微信小程序也发布了，也许将来真的没那么复杂了，没有玩过上一代互联网的人上手就会这一代网上的各种活动，带来更便利的生活了。哪怕看个新闻，老一辈的人都是看报纸或者报刊，有时候还得去图书馆或者老年活动室，但现在，只要你有个手机，有今日头条，不是难事。微信我认为是在华为管道之上的管道。 以上说的管道都是社会的，企业的，那么对于个人来说，什么是个人的管道？ 李笑来老师有一篇文章—躺着赚钱，里面提到一个“睡后收入”的概念，实际上，我的理解是你休息，度假，空闲时候都会给你带来的收入。如何实现“睡后收入”，就需要打造起一个可以流出Money的管道，这个管道在这篇文章中是指那种可以一次性付出却能够长期获得收入的事情。 为什么要建立自己的管道作为职场中人，每天忙着干工作，往往没有时间静下心来考虑这个问题 如果有一天，因为某种原因（公司倒闭了， 或者身体病变，交通意外），你无法胜任工作了，你怎么办。 突然没有收入，对你来说，犹如晴天霹雳，无法接受。就算暂时有存款，又能维持多久呢，至少已经无法维持原来已有的体面生活了。 退一步来讲，如今的社会变化飞快，现在的你可能还年轻，再过十年二十年，你是否能够保持现在的工作和生活水准，恐怕未知，而且很可能是质量下降的。 要解决这个问题，就需要打造自己的管道，开发出收入的第二引擎，第三引擎，并且是真正的管道，一次性付出，持续不断的获得收入。 如何打造自己的管道​概念很清楚，对于个人来说，引用这个定义 可以一次性付出却能够长期获得收入的事情 ​ 如果你是职场中人，有两种模式也许可以借鉴，你可能想到了更好的，欢迎留言。 利用手中的资金 定期投资股票和基金，长期持有，比如美股，P2P网贷等。选好某只股票/基金之后，长期持有（5-10年），利用复利的效应，跑赢通货膨胀。 投资不动产，前提是现金比较充足的情况下，选择不动产请牢记地段，地段，地段。 定期定额投资数字货币，比如比特币，买定之后，长期持有，5年之后再看。关于定期定额投资，可以参考这个 利用技能跑过时间 思考一下你现有的专业和技能，是否可以定期输出，对社会有价值，是的话，选择在今日头条，微信公众号，简书，知乎等类似的平台上坚持原创输出。通过打赏，广告，社群等模式获得收入。 打造一些工具，微信小程序已经发布了，也许可以用小程序实现一些垂直类或者行业级的工具。 在单个工具基础上，实现行业级的工具/行业平台，实现更粗的管道。 分享打造工具的方法获取收入，更多的是培训，教育。 利用时间杠杆每个人都只有24小时，而老板们主要是通过购买人的时候，来实现时间杠杆，撬动金钱流入口袋。如果有志创业，开始准备创业前的各种活动吧，包括技能，资金，人脉等，为实现时间杠杆准备。 总结要建立自己的管道，因为它就是我们的生命线。]]></content>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作感悟]]></title>
    <url>%2F2017%2F05%2F24%2F%E5%B7%A5%E4%BD%9C%E6%84%9F%E6%82%9F%2F</url>
    <content type="text"><![CDATA[工作感悟工作职责参加工作后，就会发现，你会扮演一个角色，比如开发工程师，需求分析师，测试工程师，项目经理，产品经理等等，而这些角色一般都会有相应的工作职责，工作职责一般都会和相应的角色需要的技能强相关。 比如你是一个开发工程师，可能主要是代码相关的工作。好了，一旦参加了工作，久而久之，大家就会钻进这个圈了，什么圈呢，只做工作职责范围内的事情，其他事情一律不管。结果是什么呢，一段时间或几年后，可能这个角色在公司里面对应的岗位已经不需要了，甚至市场上也需求不旺，就这样人就废了。这就像陷入【发多少工资办多少事】这样的陷阱，自己把自己限制死了。 工作职责范围内的事情只是最基本的工作，在自己的工作之余，务必关注周边角色的对自身角色的需求和反馈，进一步的，看看周边角色自己是不是也可以尝试。比如一个开发工程师可以关注下测试工程师的工作内容，是否可以优化，有没有可以帮得上忙的，反过来测试工程师不能仅仅是点点点，应该能够学习编程，开始编写测试工具，debug程序，甚至review代码和修改代码。这样不仅对个人有利，对于公司来说，更是利好。 这个世界是变化的，工作职责对应的角色，几年之内，不仅仅在本公司内不再需要，甚至整个市场都会被淘汰，因此职场人在做好本职工作的同时，应该尝试多做职责范围之外的工作。 定期更新知识和技能今天的知识和技能，可能还是我们手上的工作敲门砖，很可能过两年已经被淘汰了。如今的互联网，学习资源多的很，而且很容易获取，前提是学会使用Google。掌握一门新的技术，只要肯定期花时间投入，没有学不会的。这里需要特别注意的一点是，好好使用工作之外的业余时间，来打造更新知识和技能。 同样的，学历和学校只能代表过去，在长达30-40年的职业生涯中，长期来看这个可能是最不重要的，关键还在于快速的学习能力。只有定期更新知识和技能，加上快速学习，那才不至于被社会淘汰。 注重工作成果很多人吐槽加班，变态的企业文化等，从而对公司产生抱怨和不理解，这些其实都是表面的，个人的关注焦点应该从工作时间，工作强度，单项的文化传递转变为注重工作成果和实效的角度。多从老板（你的上级或者上上级）的角度考虑，也许他们的述求并不是工作时间，政治文化等，如果能够解决他们面临的问题，也许就能迎刃而解。 个人品牌在工作中，只要是手上的事情，应该尽可能的做到最好，这样才有可能在下一个上升的平台有机会，否则很难会有传送门开启。这其实也是建立个人品牌的第一步。因为把事情做好了，会给我们带来声誉，他人对你的信任，对你的了解，你的才能体现，你的修为，你的气质，你的领导能力，组织能力等，因为良好声誉的建立，事业和资源就会聚集过来。 随着新媒体的出现，个人应该开启多维度立体的社交网络。 微信，微博，推特等的开通和运作 微信公众号的开通和运作，可以是行业的信息，个人的分享等。 知乎，简书类内容网站的专题内容制作，可以和微信公众号同步。 其他音视频的发布等。 专注于个人的专业专题，展开提供内容，逐步延伸。 如果有一天个人品牌已经足够有影响力，那么你的生命可能已经有了新的高度，工作带来的幸福感强烈，事业也就在自己手中。]]></content>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[码尺]]></title>
    <url>%2F2017%2F05%2F22%2F%E7%A0%81%E5%B0%BA%2F</url>
    <content type="text"><![CDATA[码尺前述在软件开发中，会遇到需要代码量估算和度量的问题，估算很大程度上依赖于个人经验，而且相对来说较为准确，那么这里的经验是对于代码量的评估，这个经验怎么来，就需要对于已有项目的代码量的度量。我反对单纯拿代码量来评估程序员的工作贡献，因为这个维度太狭隘，本身的逻辑复杂度，藏在代码中的BUG量等等因素，决定了程序员需要花费的时间很不一样，况且本身代码的价值不能以代码量单一维度来衡量。 但无论如何，代码量确实还是一个度量维度。 另外，对于程序员对代码的自我估算，也是一个很好的参考维度，累计几个项目下来，基本上可以估算出类似项目（使用统一语言，逻辑复杂度相近等），自己的产出效率。 还有，我们阅读他人的代码，代码量统计出的结果对我们研读代码很有参考价值。 很早以前，我们看代码量也许会用到商用工具或者免费工具，亦或者自己写一个程序来统计，但往往不同的工具统计结果总是不一样，有对代码量的概念理解不一致的， 比如是否包含注释，是够包含删除的代码，不同的代码是否采用了折算等等，有支持的语言只有1-2种的，有工具包含bug统计有误的，有使用很不方便的，有安装很复杂的，有不能对压缩包代码进行统计的，有只能在windows系统运行的， 加上很多公司是不会买软件的，只要收费，他们都觉得贵。 解决方案现在好了，有个开源的项目可以解决这些问题，那就是 https://github.com/AlDanial/cloc 如果你希望命令行，下面的可以不看了。 项目地址下面开始详解本项目，项目命名为 码尺， 意为 代码量统计，度量代码，简称码尺 目的是可以搭建自己的代码统计平台并在网页中显示，不需要在命令行下折腾了。 安装流程 安装好node，参考node 。 根据这个地址cloc 安装好这个工具。 命令行下敲 $PATH 找到目录，选任意一个目录，将本项目下cloc_git 拷入。 在项目根目录，命令行下敲 npm i 命令行下敲 node ./bin/www 打开浏览器输入 localhost:3000 在文本框输入github地址，稍等片刻，就会输出代码量统计信息。 后续计划 本地目录的代码统计 更优的UI，进度条 不同项目代码量比对 结果导出 参考 https://github.com/AlDanial/cloc https://echohn.github.io/2016/09/24/use-cloc-to-count-your-code/]]></content>
  </entry>
  <entry>
    <title><![CDATA[Github的Push操作后提示Connection reset by peer问题解决方法]]></title>
    <url>%2F2017%2F05%2F20%2FGithub%E7%9A%84Push%E6%93%8D%E4%BD%9C%E5%90%8E%E6%8F%90%E7%A4%BAConnection-reset-by-peer%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Github的Push操作后提示Connection reset by peer问题解决方法 前言这个问题耗费了我大约3个小时，并且让我很不爽。生命就是这样浪费的，希望此文对遭遇同此问题的人有所帮助。 问题按照惯例我写好博文后，准备提交（Hexo d）到Github，但这回出现了这个 ssh_exchange_identification: read: Connection reset by peer 在终端输入 12&gt; ssh -T -v git@github.com&gt; 出现类似下面的信息： 1234567891011121314151617&gt; ssh -T -v git@github.comdebug1: Reading configuration data /Users/xxx/.ssh/configdebug1: /c/Users/ELI/.ssh/config line 1: Applying options for github.comdebug1: Reading configuration data /etc/ssh/ssh_configdebug1: /etc/ssh/ssh_config line 1: Applying options for *debug1: /etc/ssh/ssh_config line 5: Applying options for github.comdebug1: Connecting to ssh.github.com [192.30.253.112] port 443.debug1: Connection established.debug1: identity file /Users/ELI/.ssh/id_rsa type 1debug1: key_load_public: No such file or directorydebug1: identity file /Users/ELI/.ssh/id_rsa-cert type -1debug1: identity file /Users/ELI/.ssh/github_rsa type 1debug1: key_load_public: No such file or directorydebug1: identity file /Users/ELI/.ssh/github_rsa-cert type -1debug1: Enabling compatibility mode for protocol 2.0debug1: Local version string SSH-2.0-OpenSSH_7.3ssh_exchange_identification: Connection closed by remote host 办法于是搜索解决办法（很多是连接阿里云或者服务器的ssh问题，搜索的时候要去除，比如加减号），尝试了一些解决办法 修改~/.ssh目录和文件权限，无效 按照github官网教程重新生成我的SSH并测试，无效 修改hosts文件，添加这一行 192.30.253.112 github.com ，仍然无效 于是仔细回想了我的电脑这几天有什么配置更新，无非就是科学上网的规则文件添加了一些网址，于是注释掉这些网址，仍然无效。 最后在看这个帖子的时候，想起来了我的上网环境有变化，现在是在图书馆，所以可能是图书馆的防火墙或者代理服务器或者路由器缓存的问题，于是把上网网络改为手机4G提供热点来上网，Hexo d提交ok。所以如果你的电脑环境从家里换成公司或者其他公共场合，就要注意了，可能是提供网络的路由器或者机构的防火墙作怪哦。 总结 搜索解决方案的时候，务必想好关键词，比如这个问题， 搜索（ssh_exchange_identification: read: Connection reset by peer）时一定要加上 github ，否则会搜出一大堆服务器相关的类似问题，将会耗费你很多时间。 类似问题多联想电脑的环境，不仅仅是软件环境，还包括物理环境，网络，配件，电源等的改变。 类似问题，应该多从 https://segmentfault.com http://stackoverflow.com/ 知乎 等类似网站找办法，这样可以更快找到解决办法。 网络问题，要考虑中国国情。 参考：https://segmentfault.com/q/1010000007667483 https://blog.hainuo.info/blog/235.mhtml https://help.github.com/articles/connecting-to-github-with-ssh/ http://molon.me/2013/12/ru-he-zai-ben-ji-pei-zhi-githubde-ssh/ http://blog.csdn.net/gdutxiaoxu/article/details/53573426]]></content>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杭州的小红车]]></title>
    <url>%2F2017%2F05%2F19%2F%E6%9D%AD%E5%B7%9E%E7%9A%84%E5%B0%8F%E7%BA%A2%E8%BD%A6%2F</url>
    <content type="text"><![CDATA[杭州的小红车2008年开始在杭州滨江工作，那时候还没有开车，因为租房每隔一段时间就会换地方，上班曾经步行，自行车，电动车。无论自行车，电动车，你都需要走回放自行车或者电动车的地方去取，然后回家或者到另外一个地方，比如游玩西湖/湘湖，如果按照这个办法，实际上你只能等公交或者打车回来取车，非常不划算，而走路，莫大一个西湖或者湘湖基本上可以大半天或者一天。 有一种办法是采用小红车，这是杭州特有的公共自行车，刷一下市民卡，一小时内免费，超过一小时1元，基本上骑行游玩西湖不成问题，当时是2008年，实际上滨江的停车点并不多，但是几个大超市和小区，医院旁边基本上已经有了，所以可以满足基本的出行需求，当然当时的小红车晚上9点就不能解锁了，后来几年，停车点越来越多，几乎覆盖了人员密集区，所以可以说很好地解决了自己的自行车存在回出发地取车的问题，当然你需要把车放到固定的小红车停车点。 2015年以来，出现了共享单车，它更进一步的解决了回出发地取车的问题，随处可见共享单车，扫码即走，不需要办市民卡，不需要找固定停车点，几乎是随处可停，24小时不打烊（迫于压力，貌似小红车在2017年3月份跟进了，也开始24小时不打烊了）。 我自己也已经有一段时间的共享单车体验，我住的周边目前主要有Hellobike和小鸣单车（其他牌的也有，但是数量太少，骑过1-2次之后，经常找不到车，退钱删APP），完全满足我的需求，可以骑到附近图书馆，学校，医院，各种市场等，随时停放，你也可以骑进小区内的家门口。 对于2-3公里内的路程，已经完全可以满足需要了，已经看到很多很多的人骑着共享单车上班了。对于超过3公里，体力可能就会比较消耗，上班骑完车可能就出汗了，对于上班来说不太合适，和开车相比，5公里的路程，就会显得没有动力骑车前往。 你可能有这样的体验，随着高铁开通，城市与城市之间的距离越来越短，但是城市内部的交通却非常堵，让人觉得很慢，距离很长。比如你从杭州到温州，高铁就是3个小时，可是从家里到杭州东站，然后温州高铁站到目的地，可能也需要耗费3个小时（就算你是打车的），城市内的道路红绿灯很多，高架还是堵，甚至高速也是堵的，并且无疑时间和经济成本也是很高的。如果有小红车这样的，也能轻松5公里以上，也许对于个人来说，成本就划算多了，只要你的行李不是太多，一般的商务出行，那么如果有这样的车来替换，足以满足需求。 就在前两天，看到了小红车这一条版本升级信息，貌似可以解决超过5公里路程这样的问题。 http://zj.zjol.com.cn/news/642337.html 可以充电，助力自行车，固定停车点有电池宝（电来自太阳能充电），可以给自行车插上电池宝，然后骑行有双倍助力，上坡一点都不痛苦。 更为重要的一点，它可以解决手机的充电问题，这可是马斯洛需求的负二层需求。 总结和思考 小红车数量和固定停车点还是不够，当然这本身有个过程，毕竟是重资产投资。如果不够多，那么用的人就会少，继而转向使用其他单车。 充电的思路非常好，利用好了自己的优势，点赞。其他单车也许可以借鉴或者换个思路。 在火车/汽车站，大型商场，大公司，大型写字楼，景点，主要小区应该多投放，城乡结合部的繁荣区更应该投放。 对于大众来说，也许汽车没什么必要买了。]]></content>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人工智能时代，你会成为那个巫师吗]]></title>
    <url>%2F2017%2F05%2F15%2F%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%97%B6%E4%BB%A3%EF%BC%8C%E4%BD%A0%E4%BC%9A%E6%88%90%E4%B8%BA%E9%82%A3%E4%B8%AA%E5%B7%AB%E5%B8%88%E5%90%97%2F</url>
    <content type="text"><![CDATA[人工智能时代，你会成为那个”巫师”吗 有人担心人工智能会统治世界，这话的意思基本上可以理解为 控制人工智能的人类将会统治世界。 人们害怕的是懂得控制人工智能的人类,如果这些懂得控制的人类想干点什么坏事，那么世界很容易变坏。 不说远的，以当前的科技看，BAT掌握了大量的用户数据，包括个人隐私（人脸，身份信息等），用户行为习惯（比如买什么，什么时候买，在哪买），资金流向（各种钱包）等等，根据这些数据完全可以轻易作恶（引导，控制），一旦作恶，这个世界就会没有安全感，继而恶化。实际上互联网可以理解为人工智能的萌芽阶段，一旦数据样本达到量级，机器学习实现，那么很多事情就显得简单，智能。 机器（PC，电子商品）是工具，就像菜刀，或者螺丝刀，或者汽车，在不同的人手上，可以做坏事，也可能做成很好的事，给人类带来巨大的福祉。一百年前的人类看到汽车和我们现在的普罗大众看到PC或者类似的智能设备，大概是相当的，那时候的大部分人不会这玩意，觉得会制造汽车和开汽车的人很有技术含量，就像远古时代的巫师，让原本不可能的事情发生。 当今，人们看待能够控制PC或者类似设备的人比如程序员，就像当年的巫师，他们手上有着神奇的工具，可以自动发帖，自动回帖，自动完成股票交易，自动开关机，自动爬取数据并分析，让机器写出高质量新闻稿，识别人们的偏好并且推送广告，让生产线上的机械手臂智能抓取和分拣，让火箭飞上天，让汽车自动驾驶，让飞机自动驾驶等等，当然也可以盗取个人信息，盗取银行账号，黑进监控摄像头看到大量隐私，黑进社交账号控制，跟踪等等。 人们在当今时代使用这些PC等类似设备，更多的是作为“消费者”，娱乐，简单办公，而真的懂得控制的人很少，人工智能时代，这些程序员又是成为控制人工智能的种子选手，如果不懂得程序/编程，无疑将成为一般的“消费者”，不是“生产者”，那么必然受制于人工智能，哦，应该是受制于控制人工智能的人，也许有些极端，但至少“消费者”对于这些设备或者人工智能是被限制自由的。 那么如何逐步成为未来的“巫师”呢？ 第一步当然是成为程序员，而要成为程序员，最好选择一门比较容易学习的语言上手，比如Python，比如JavaScript。 接着，也许你可以看看这个 https://goo.gl/dYJ61K 哇咔咔。]]></content>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[罗技K380键盘使用后感受]]></title>
    <url>%2F2017%2F05%2F10%2F%E7%BD%97%E6%8A%80K380%E9%94%AE%E7%9B%98%E4%BD%BF%E7%94%A8%E5%90%8E%E6%84%9F%E5%8F%97%2F</url>
    <content type="text"><![CDATA[罗技K380键盘使用后感受 必须先上图 特点 支持蓝牙，什么意思， 无限传输，没有线了，不需要呆呆的坐在电脑前，你可以放在膝盖上，也可以躺在沙发上操作，还可以像小提琴一样扛着，随便改变姿势。 看到三个绿色的按钮了吗，可以支持三台设备连接，随意一键切换，手机，各种pad，笔电，随便切换。 两只手那么大，厚度和苹果mac pro差不多，轻便，非常方便携带。 打字比苹果笔电的内置键盘舒服，有手感。 价格199元，平民价格，和苹果的原装键盘比，性价比高。 如果你讨厌桌面上的键盘线，如果你有多块显示器，如果你经常携带设备外出，那么，你应该拥有它。]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Resilio Sync 使用后随想]]></title>
    <url>%2F2017%2F05%2F04%2FResilio-Sync-%E4%BD%BF%E7%94%A8%E5%90%8E%E9%9A%8F%E6%83%B3%2F</url>
    <content type="text"><![CDATA[Resilio Sync 是个神器，它可以通过密钥分享你拥有设备上的文件。使用过一段时间之后，觉得不错。 速度只要你的文件分享后的共享节点足够多，那么速度就越快。 内容可以是你自己的工作文件通过间共享，也可以是生活照片的共享，还可以是一个自己的静态网站，静态博客，录制的音频节目，歌曲录音，自制视频等，工具一旦普及和玩法多样化，那么很多现在的网站，APP等并不需要存在了，去中心化了。 易用性软件做的非常简洁，易用性强。 共享key已经有很多公开的key了，大部分是资源key。哦，对了也许你可以看下这个key https://syncfan.com/]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用户手册]]></title>
    <url>%2F2017%2F05%2F02%2F%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[用户手册记得刚参加工作后，就接触到了电信大型机房里面设备的源代码，而这些代码是由一个个组件（component）组成的，就像积木一样，每个积木（组件）都有一份用户手册，这个手册面对的用户不是机房的管理员，而是搭积木的开发人员，因此手册的质量好坏直接影响了积木能否搭的好。组件都是用C语言编写的，而手册呢，大家可能见过微软的msdn的，在那个时候，需要一张光盘的容量，后来貌似是好几张，反正非常详细，我们的组件手册就是类似的东东，里面对于组件有个基本的架构介绍，使用场景分析，然后是提供的功能／特性介绍，接着就是这些功能／特性的API详细描述，最后是一些DEMO的示例代码。一份好的用户手册，能够帮助搭积木的人（二次开发者，架构师，测试工程师等）迅速理解积木（组件）的原理，快速搭建开发。而一份错误百出的手册，足以使机房的机器宕机N次，记得有几个月公司专门定期派人出差带在机房守着，半夜两点重启机器，为什么呢，因为不重启，很快就会宕机，而且很难恢复，所以问题没有被排除查出来之前，就像女人来了大姨妈一样，每个月总的出差一次。后来查找原因，根源在于用户手册API说明错误导致误用后内存泄漏。 这样的事情算是比较严重的了，因为一旦宕机，5分钟一个城市无法打电话发短信上网，那么电信运营商的损失少则几千万，多则上亿。其他因为用户手册的谬误或者读用户手册的人的理解错误导致的问题就更多了。曾经使用过Source Insight这个软件，也许你也用过，这个工具是一个阅读／分析代码的工具，当然也可以编辑，性能卓越，在没有atom／sublime text，github等之前，可以说这个工具是让开发者感觉异常幸福的工具，不但这个工具本身好，你是否看过它的用户手册，这个手册写的相当的好，既有面对小白用户的简要说明，又隐含了宏控制和可定制功能，手册语言深入浅出。 同样，atom工具是github开发的开源编辑器工具，工具好用用过便知，关键除了一般意义上的用户手册之外，专门出了Atom Flight Manual,易读性强，只不过大部分人可能读不完整,如果真的通读一遍了，那么对于编辑器，就会有和之前完全不同的思考角度，甚至它们录制了有意思的引导视频。 Atom Flight Manual开篇就是 Why Atom?There are a lot of text editors out there; why should you spend your time learning about and using Atom? Editors like Sublime and TextMate offer convenience but only limited extensibility. On the other end of the spectrum, Emacs and Vim offer extreme flexibility, but they aren’t very approachable and can only be customized with special-purpose scripting languages. We think we can do better.Our goal is a zero-compromise combination of hackability and usability: an editor that will be welcoming to an elementary school student on their first day learning to code, but also a tool they won’t outgrow as they develop into seasoned hackers. Atom和Source insight有个共同点，既适合于初学者使用，容易上手，又能够满足用起来后，逐步探索深度用法的群体。 当然关于Atom，我认为有一个点很有必要改进，就是它的插件，即packages，特别是每个package的使用手册，一个字，烂。 说到package，就会让人想起了nodejs，npm，看看这俩的API手册或者用户手册吧，相当不错，例子丰富，当然，也许这是许多人用起来的缘故吧。node的用户手册不用说了，有node的组织搞定。npm上面的package，用户量大的包自然也没有问题，话说大部分也是使用最常用的，所以相比之下，node的package部分用户手册还不错。 而关于用户手册，这个神器你不可错过。 DASH Dash is an API Documentation Browser and Code Snippet Manager. Dash stores snippets of code and instantly searches offline documentation sets for 150+ APIs (for a full list, see below). You can even generate your own docsets or request docsets to be included. 除了各种语言／平台的用户手册外，他还有cheat sheets（不理解，到GitHub上面搜搜），cheat sheets还有ascii表（想当初可以打印出来贴在办公位前方的）和emoji列表等等（惊喜多多），甚至你还可以自己定义cheatsheet和用户手册，这对于提供各种SDK的网站／平台来说，多么好的工具啊。 不过有点可惜，只有mac平台和Ios平台有。 你看过的优秀用户手册是什么手册？（不限IT领域）理由？]]></content>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编程类入门书籍的思考]]></title>
    <url>%2F2017%2F05%2F01%2F%E5%8D%B3%E6%97%B6%E5%8F%8D%E9%A6%88%2F</url>
    <content type="text"><![CDATA[要有生动的例子看了多少编程类书籍，很大一部分是以语法开始，例子也显得很干枯，无趣，最后让人崩溃，很多人学到一半（可能是十分之一就看不下去了）就已经被吓到了，进而放弃。也可以看到少部分好的，开头就给出生动的例子和展现效果，让人产生浓厚的兴趣之后，进而展开，逐步分解讲述语法和思想，又或者每章开头就给出例子，进而针对例子讲解，并给出引导性的练习。如果没有生动的例子，只是一堆代码片段的罗列，很难吸引人，让人对这些古怪的文字产生兴趣。 编程环境的搭建要有足够好的引导不能不说最适合初学者的环境还是Mac系统环境，最差的就是Windows系统环境，等你的是无数的坑，你就等着跳吧。稍好一点的是Linux的Ubuntu，为什么？因为有足够多的人用，所以可以找到的问题解决方法较多。这里就涉及到什么语言了，比如静态语言，都得需要编译器和链接相关的工具，加上配置等，都可以把新手直接挡在门外，这需要足够好的引导，能够迅速让新手搭建起环境的教程，而动态语言如Ruby，Python，Mac系统环境直接就已经装好，直接用，Javascript就更简单了，有个Chrome浏览器就可以开始玩了。 要有在线版本和社群编写程序本身一样，实现之后，总会有各种各样的Bug，就需要测试，修正，就算经过这些测试修正，系统上线仍然会出现一些Bug，有些还是比较致命的Bug，还需要灰度发布，众测，迭代的过程。书籍，特别是编程类书籍，除了编辑的修正、测试之外，也需要灰度发布，众测，不断快速迭代更新的过程。 说实话，编程类书籍已经不适合出纸质书了，一旦出现了某一差错，这样的差错可以是代码片段的拼写错误或者完全是逻辑错误，也有可能是环境／依赖版本变化造成的这种错误，这类错误对读者都是灾难性的，为什么，浪费读者的精力，而且买的越多越害人，进而让很多原本有潜力的同学不能入门，害人呐。纸质书完全实时更新，要等下一版本需要很久的时间（最快估计也得三个月），根本无法解决这类问题。还有更为重要的是，IT界的知识迭代的非常快，今天可以用的库，API，明天可能已经不能用了，加上操作系统，数据库的变化，说的夸张一点，几天，纸质书已经不适用了。 有了在线版本，就可以随时修正，修订，根据环境的变化随时刷新（迭代也是秒级的），加上必要的论坛，群组支持，书籍完全可以形成内容经济，单独的IP。 在线版本除了这些之外，可以充分利用现有网络形式，文字，音频，视频，VR等设施，形成立体的信息传递。 总结也许做好这些，编程书籍就不仅仅是书籍了，哈哈。反过来想，入门编程也就不是单单看书的形式了，毕竟这已经是新的时代了，]]></content>
  </entry>
  <entry>
    <title><![CDATA[你使用过的利器有什么]]></title>
    <url>%2F2017%2F05%2F01%2F%E4%BD%A0%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E5%88%A9%E5%99%A8%E6%9C%89%E4%BB%80%E4%B9%88%2F</url>
    <content type="text"><![CDATA[因为订阅MacTalk微信公众号，知道了即刻这个APP，因为长期使用这个APP，知道了利器。 通过利器，知道了很多我未曾知道但其实很有用的“利器”。比如下面的这个 Kleenex 湿厕纸 还有这个，让我们生活的更好。 f.lux 还有。。。。。。。 这些怎么知道的呢，那就要看利器的社群计划了，这个计划非常好，每个人可以看到别人分享的利器，同时如果你愿意加入这个计划，就按格式发表一下你自己用过的利器短文。而这篇就是我的利器短文，按格式来。 介绍一下你自己和所做的工作Hello，大家好，我是姜豪。 曾经在通信研发软件领域摸爬滚打多年，目前从事物联网软件领域相关研发工作。私人时间研究区块链，虚拟货币，网络社群等。 你都在使用哪些硬件？目前使用mac pro 最新touch bar 1寸版本。手机用过各种牌子，现在使用华为MATE系列，希望软件好好改进。 最近在研究RUFF。 软件呢？ 简书 极好的写作平台，Markdown支持完美。Atom 编程，写作利器，如果你看下他的介绍视频，你就知道他们的野心了。Everything 多年前有个google desk的工具，但是远远不如这个好用，因为我们能够记住的东西并不多，而我们希望尽快得到我们知道片段的所有结果，然后选择。显然desk有些慢。就说三个我觉得最好的吧，说多你也记不住：） 你最理想的工作环境是什么？物理环境只要不是极端恶劣环境，我觉得都可。最希望的是软的环境，比如身边有不错的若干聪明人，共事起来都让人觉得很nice。 你平时获得工作灵感的方式有哪些？夜晚开车的时候，进入人车合一的状态，那么灵感就来了。平时需要大量的输入，阅读，体验，反复实践。思考，死磕。 推荐一件生活中的利器给大家。出门前记住念一遍， 伸手要钱–身（身份证）手（手机）钥（钥匙）钱（钱包） 最后，你用过的利器有什么？ 本文参与了「利器社群计划」，发现更多创造者和他们的工具：http://liqi.io/community/]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>