<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小工日志</title>
  <subtitle>小工变专家之路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaogong.me/"/>
  <updated>2017-05-02T14:11:04.000Z</updated>
  <id>http://xiaogong.me/</id>
  
  <author>
    <name>姜 豪</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用户手册</title>
    <link href="http://xiaogong.me/2017/05/02/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/"/>
    <id>http://xiaogong.me/2017/05/02/用户手册/</id>
    <published>2017-05-02T14:08:45.000Z</published>
    <updated>2017-05-02T14:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户手册"><a href="#用户手册" class="headerlink" title="用户手册"></a>用户手册</h1><p>记得刚参加工作后，就接触到了电信大型机房里面设备的源代码，而这些代码是由一个个组件（component）组成的，就像积木一样，每个积木（组件）都有一份用户手册，这个手册面对的用户不是机房的管理员，而是搭积木的开发人员，因此手册的质量好坏直接影响了积木能否搭的好。组件都是用C语言编写的，而手册呢，大家可能见过微软的msdn的，在那个时候，需要一张光盘的容量，后来貌似是好几张，反正非常详细，我们的组件手册就是类似的东东，里面对于组件有个基本的架构介绍，使用场景分析，然后是提供的功能／特性介绍，接着就是这些功能／特性的API详细描述，最后是一些DEMO的示例代码。一份好的用户手册，能够帮助搭积木的人（二次开发者，架构师，测试工程师等）迅速理解积木（组件）的原理，快速搭建开发。而一份错误百出的手册，足以使机房的机器宕机N次，记得有几个月公司专门定期派人出差带在机房守着，半夜两点重启机器，为什么呢，因为不重启，很快就会宕机，而且很难恢复，所以问题没有被排除查出来之前，就像女人来了大姨妈一样，每个月总的出差一次。后来查找原因，根源在于用户手册API说明错误导致误用后内存泄漏。</p>
<p>这样的事情算是比较严重的了，因为一旦宕机，5分钟一个城市无法打电话发短信上网，那么电信运营商的损失少则几千万，多则上亿。其他因为用户手册的谬误或者读用户手册的人的理解错误导致的问题就更多了。曾经使用过Source Insight这个软件，也许你也用过，这个工具是一个阅读／分析代码的工具，当然也可以编辑，性能卓越，在没有atom／sublime text，github等之前，可以说这个工具是让开发者感觉异常幸福的工具，不但这个工具本身好，你是否看过它的用户手册，这个手册写的相当的好，既有面对小白用户的简要说明，又隐含了宏控制和可定制功能，手册语言深入浅出。</p>
<p>同样，atom工具是github开发的开源编辑器工具，工具好用用过便知，关键除了一般意义上的用户手册之外，专门出了<a href="http://flight-manual.atom.io/" target="_blank" rel="external">Atom Flight Manual</a>,易读性强，只不过大部分人可能读不完整,如果真的通读一遍了，那么对于编辑器，就会有和之前完全不同的思考角度，甚至它们录制了有意思的引导<a href="https://www.youtube.com/watch?v=Y7aEiVwBAdk" target="_blank" rel="external">视频</a>。</p>
<p>Atom Flight Manual开篇就是</p>
<blockquote>
<h3 id="Why-Atom"><a href="#Why-Atom" class="headerlink" title="Why Atom?"></a>Why Atom?</h3><p>There are a lot of text editors out there; why should you spend your time learning about and using Atom?</p>
<p>Editors like Sublime and TextMate offer convenience but only limited extensibility. On the other end of the spectrum, Emacs and Vim offer extreme flexibility, but they aren’t very approachable and can only be customized with special-purpose scripting languages.</p>
<p>We think we can do better.<strong>Our goal is a zero-compromise combination of hackability and usability: an editor that will be welcoming to an elementary school student on their first day learning to code, but also a tool they won’t outgrow as they develop into seasoned hackers.</strong></p>
</blockquote>
<p>Atom和Source insight有个共同点，既适合于初学者使用，容易上手，又能够满足用起来后，逐步探索深度用法的群体。</p>
<p>当然关于Atom，我认为有一个点很有必要改进，就是它的插件，即packages，特别是每个package的使用手册，一个字，烂。</p>
<p>说到package，就会让人想起了nodejs，npm，看看这俩的API手册或者用户手册吧，相当不错，例子丰富，当然，也许这是许多人用起来的缘故吧。node的用户手册不用说了，有node的组织搞定。npm上面的package，用户量大的包自然也没有问题，话说大部分也是使用最常用的，所以相比之下，node的package部分用户手册还不错。</p>
<p>而关于用户手册，这个神器你不可错过。</p>
<blockquote>
<p><a href="https://kapeli.com/dash" target="_blank" rel="external">DASH</a></p>
<p>Dash is an API Documentation Browser and Code Snippet Manager. Dash stores snippets of code and instantly searches offline documentation sets for 150+ APIs (for a full list, <a href="https://kapeli.com/dash#docsets" target="_blank" rel="external">see below</a>). You can even <a href="https://kapeli.com/docsets" target="_blank" rel="external">generate your own docsets</a> or <a href="https://kapeli.com/contact" target="_blank" rel="external">request docsets</a> to be included.</p>
</blockquote>
<p>除了各种语言／平台的用户手册外，他还有cheat sheets（不理解，到GitHub上面搜搜），cheat sheets还有ascii表（想当初可以打印出来贴在办公位前方的）和emoji列表等等（惊喜多多），甚至你还可以自己定义cheatsheet和用户手册，这对于提供各种SDK的网站／平台来说，多么好的工具啊。</p>
<p>不过有点可惜，只有mac平台和Ios平台有。</p>
<p>你看过的优秀用户手册是什么手册？（不限IT领域）理由？</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用户手册&quot;&gt;&lt;a href=&quot;#用户手册&quot; class=&quot;headerlink&quot; title=&quot;用户手册&quot;&gt;&lt;/a&gt;用户手册&lt;/h1&gt;&lt;p&gt;记得刚参加工作后，就接触到了电信大型机房里面设备的源代码，而这些代码是由一个个组件（component）组成的，就像积木一样
    
    </summary>
    
    
      <category term="编程" scheme="http://xiaogong.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>编程类入门书籍的思考</title>
    <link href="http://xiaogong.me/2017/05/01/%E5%8D%B3%E6%97%B6%E5%8F%8D%E9%A6%88/"/>
    <id>http://xiaogong.me/2017/05/01/即时反馈/</id>
    <published>2017-05-01T14:08:56.000Z</published>
    <updated>2017-05-01T14:54:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要有生动的例子"><a href="#要有生动的例子" class="headerlink" title="要有生动的例子"></a>要有生动的例子</h2><p>看了多少编程类书籍，很大一部分是以语法开始，例子也显得很干枯，无趣，最后让人崩溃，很多人学到一半（可能是十分之一就看不下去了）就已经被吓到了，进而放弃。也可以看到少部分好的，开头就给出生动的例子和展现效果，让人产生浓厚的兴趣之后，进而展开，逐步分解讲述语法和思想，又或者每章开头就给出例子，进而针对例子讲解，并给出引导性的练习。如果没有生动的例子，只是一堆代码片段的罗列，很难吸引人，让人对这些古怪的文字产生兴趣。</p>
<h2 id="编程环境的搭建要有足够好的引导"><a href="#编程环境的搭建要有足够好的引导" class="headerlink" title="编程环境的搭建要有足够好的引导"></a>编程环境的搭建要有足够好的引导</h2><p>不能不说最适合初学者的环境还是Mac系统环境，最差的就是Windows系统环境，等你的是无数的坑，你就等着跳吧。稍好一点的是Linux的Ubuntu，为什么？因为有足够多的人用，所以可以找到的问题解决方法较多。这里就涉及到什么语言了，比如静态语言，都得需要编译器和链接相关的工具，加上配置等，都可以把新手直接挡在门外，这需要足够好的引导，能够迅速让新手搭建起环境的教程，而动态语言如Ruby，Python，Mac系统环境直接就已经装好，直接用，Javascript就更简单了，有个Chrome浏览器就可以开始玩了。</p>
<h2 id="要有在线版本和社群"><a href="#要有在线版本和社群" class="headerlink" title="要有在线版本和社群"></a>要有在线版本和社群</h2><p>编写程序本身一样，实现之后，总会有各种各样的Bug，就需要测试，修正，就算经过这些测试修正，系统上线仍然会出现一些Bug，有些还是比较致命的Bug，还需要灰度发布，众测，迭代的过程。书籍，特别是编程类书籍，除了编辑的修正、测试之外，也需要灰度发布，众测，不断快速迭代更新的过程。</p>
<p>说实话，编程类书籍已经不适合出纸质书了，一旦出现了某一差错，这样的差错可以是代码片段的拼写错误或者完全是逻辑错误，也有可能是环境／依赖版本变化造成的这种错误，这类错误对读者都是灾难性的，为什么，浪费读者的精力，而且买的越多越害人，进而让很多原本有潜力的同学不能入门，害人呐。纸质书完全实时更新，要等下一版本需要很久的时间（最快估计也得三个月），根本无法解决这类问题。还有更为重要的是，IT界的知识迭代的非常快，今天可以用的库，API，明天可能已经不能用了，加上操作系统，数据库的变化，说的夸张一点，几天，纸质书已经不适用了。</p>
<p>有了在线版本，就可以随时修正，修订，根据环境的变化随时刷新（迭代也是秒级的），加上必要的论坛，群组支持，书籍完全可以形成内容经济，单独的IP。</p>
<p>在线版本除了这些之外，可以充分利用现有网络形式，文字，音频，视频，VR等设施，形成立体的信息传递。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也许做好这些，编程书籍就不仅仅是书籍了，哈哈。反过来想，入门编程也就不是单单看书的形式了，毕竟这已经是新的时代了，</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;要有生动的例子&quot;&gt;&lt;a href=&quot;#要有生动的例子&quot; class=&quot;headerlink&quot; title=&quot;要有生动的例子&quot;&gt;&lt;/a&gt;要有生动的例子&lt;/h2&gt;&lt;p&gt;看了多少编程类书籍，很大一部分是以语法开始，例子也显得很干枯，无趣，最后让人崩溃，很多人学到一半（可
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你使用过的利器有什么</title>
    <link href="http://xiaogong.me/2017/05/01/%E4%BD%A0%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E5%88%A9%E5%99%A8%E6%9C%89%E4%BB%80%E4%B9%88/"/>
    <id>http://xiaogong.me/2017/05/01/你使用过的利器有什么/</id>
    <published>2017-05-01T09:05:09.000Z</published>
    <updated>2017-05-01T09:11:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为订阅MacTalk微信公众号，知道了<a href="http://www.ruguoapp.com/" target="_blank" rel="external">即刻</a>这个APP，因为长期使用这个APP，知道了<a href="http://liqi.io" target="_blank" rel="external">利器</a>。</p>
<p>通过利器，知道了很多我未曾知道但其实很有用的“利器”。比如下面的这个</p>
<blockquote>
<p>Kleenex 湿厕纸</p>
</blockquote>
<p>还有这个，让我们生活的更好。</p>
<blockquote>
<p>f.lux</p>
</blockquote>
<p>还有。。。。。。。</p>
<p>这些怎么知道的呢，那就要看利器的社群计划了，这个计划非常好，每个人可以看到别人分享的利器，同时如果你愿意加入这个计划，就按格式发表一下你自己用过的利器短文。而这篇就是我的利器短文，按格式来。</p>
<h2 id="介绍一下你自己和所做的工作"><a href="#介绍一下你自己和所做的工作" class="headerlink" title="介绍一下你自己和所做的工作"></a>介绍一下你自己和所做的工作</h2><p>Hello，大家好，我是姜豪。 曾经在通信研发软件领域摸爬滚打多年，目前从事物联网软件领域相关研发工作。私人时间研究区块链，虚拟货币，网络社群等。</p>
<h2 id="你都在使用哪些硬件？"><a href="#你都在使用哪些硬件？" class="headerlink" title="你都在使用哪些硬件？"></a>你都在使用哪些硬件？</h2><p>目前使用mac pro 最新touch bar 1寸版本。<br>手机用过各种牌子，现在使用华为MATE系列，希望软件好好改进。</p>
<p>最近在研究RUFF。</p>
<p>软件呢？</p>
<p>简书 极好的写作平台，Markdown支持完美。<br>Atom 编程，写作利器，如果你看下他的介绍视频，你就知道他们的野心了。<br>Everything 多年前有个google desk的工具，但是远远不如这个好用，因为我们能够记住的东西并不多，而我们希望尽快得到我们知道片段的所有结果，然后选择。显然desk有些慢。<br>就说三个我觉得最好的吧，说多你也记不住：）</p>
<h2 id="你最理想的工作环境是什么？"><a href="#你最理想的工作环境是什么？" class="headerlink" title="你最理想的工作环境是什么？"></a>你最理想的工作环境是什么？</h2><p>物理环境只要不是极端恶劣环境，我觉得都可。最希望的是软的环境，比如身边有不错的若干聪明人，共事起来都让人觉得很nice。</p>
<h2 id="你平时获得工作灵感的方式有哪些？"><a href="#你平时获得工作灵感的方式有哪些？" class="headerlink" title="你平时获得工作灵感的方式有哪些？"></a>你平时获得工作灵感的方式有哪些？</h2><p>夜晚开车的时候，进入人车合一的状态，那么灵感就来了。<br>平时需要大量的输入，阅读，体验，反复实践。<br>思考，死磕。</p>
<h2 id="推荐一件生活中的利器给大家。"><a href="#推荐一件生活中的利器给大家。" class="headerlink" title="推荐一件生活中的利器给大家。"></a>推荐一件生活中的利器给大家。</h2><p>出门前记住念一遍， 伸手要钱–身（身份证）手（手机）钥（钥匙）钱（钱包）</p>
<p>最后，你用过的利器有什么？</p>
<p>本文参与了「利器社群计划」，发现更多创造者和他们的工具：<a href="http://liqi.io/community/" target="_blank" rel="external">http://liqi.io/community/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为订阅MacTalk微信公众号，知道了&lt;a href=&quot;http://www.ruguoapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;即刻&lt;/a&gt;这个APP，因为长期使用这个APP，知道了&lt;a href=&quot;http://liqi.io&quot;
    
    </summary>
    
    
      <category term="随笔" scheme="http://xiaogong.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
